#!/usr/bin/env python
# -*- coding: utf-8 -*-
####################################################################################################
## Copyright 2017 INRIA
##
## This file is part of the ShapeGenerator project.
##
## Contributors:
##     - thomas.morzadec@inria.fr
##
####################################################################################################


import accordion
import primitives

import math
niceaccordion=accordion.accordionUniform(1.0,0.2,0.01, "ellipsoid",5,0.6,0.6,0.5)


listheigthsJoiningPoints=[0.3,0.7,0.9]
listAxesX=[0.5,0.5,0.5,0.5]
listAxesY=[0.5,0.5,0.5,0.5]
Zrecovering=0.1
listcavities=[[0.25,"frisbee",0.5,0.5,0.2],[0.75,"frisbee",0.5,0.5,0.2],[0.5,"frisbee",0.5,0.5,0.2]]
#        niceaccordion=accordion.accordionFreeDimension(1.0,0.2,0.01, listcavities)
#        niceaccordion=accordion.accordionRecoveringGiven(1.0,0.2,0.01,"frisbee",listheigthsJoiningPoints, listAxesX, listAxesY,Zrecovering)
phrase=niceaccordion.toString()




x=1.0
y=3.0
z=5.0

frisbee=primitives.Frisbee("+",1.0,1.0,1.0,0.0,0.0,primitives.Point(0.0,0.0,0.0))
estimFrisbee=abs((0.0*x+1.0*(z-0.0))/1.0)+math.sqrt(((1.0*x-0.0*(z-0.0))/1.0)*((1.0*x-0.0*(z-0.0))/1.0)+((0.0*(x-0.0)+1.0*(y-0.0))/1.0)*((0.0*(x-0.0)+1.0*(y-0.0))/1.0))-1

print "estimFrisbee is "+str(estimFrisbee)

evalFrisbee=frisbee.eval(primitives.Point(1.0,3.0,5.0))
print "evalFrisbee is "+str(evalFrisbee)
print "They should be equal"
print "expression is "+ frisbee.toString()
print "\n"



ellipsoid=primitives.Ellipsoid("+",1.0,1.0,1.0,0.0,0.0,primitives.Point(0.0,0.0,0.0))
estimEllipsoid=((1.0*x-0.0*(z-0.0))/1.0)*((1.0*x-0.0*(z-0.0))/1.0)+((0.0*(x-0.0)+1.0*(y-0.0))/1.0)*((0.0*(x-0.0)+1.0*(y-0.0))/1.0)+((0.0*x+1.0*(z-0.0))/1.0)*((0.0*x+1.0*(z-0.0))/1.0)-1

print "estimEllipsoid is "+str(estimEllipsoid)

evalEllipsoid=ellipsoid.eval(primitives.Point(1.0,3.0,5.0))
print "evalEllipsoid is "+str(evalEllipsoid)
print "They should be equal"

print "expression is "+ellipsoid.toString()
print "\n"

cylinder=primitives.Cylinder("+",1.0,1.0,1.0,0.0,0.0,primitives.Point(0.0,0.0,0.0))
estimCylinder=max(abs((0.0*x+1.0*(z-0.0)))-1.0,((1.0*x-0.0*(z-0.0))/1.0)*((1.0*x-0.0*(z-0.0))/1.0)+((0.0*(x-0.0)+1.0*(y-0.0))/1.0)*((0.0*(x-0.0)+1.0*(y-0.0))/1.0)-1)
print "estimCylinder is "+str(estimCylinder)

evalCylinder=cylinder.eval(primitives.Point(1.0,3.0,5.0))
print "evalCylinder is "+str(evalCylinder)
print "They should be equal"

print "expression is"+ cylinder.toString()
print "\n"

union=primitives.Union(ellipsoid,frisbee)
estimUnion=min(((1.0*x-0.0*(z-0.0))/1.0)*((1.0*x-0.0*(z-0.0))/1.0)+((0.0*(x-0.0)+1.0*(y-0.0))/1.0)*((0.0*(x-0.0)+1.0*(y-0.0))/1.0)+((0.0*x+1.0*(z-0.0))/1.0)*((0.0*x+1.0*(z-0.0))/1.0)-1,abs((0.0*x+1.0*(z-0.0))/1.0)+math.sqrt(((1.0*x-0.0*(z-0.0))/1.0)*((1.0*x-0.0*(z-0.0))/1.0)+((0.0*(x-0.0)+1.0*(y-0.0))/1.0)*((0.0*(x-0.0)+1.0*(y-0.0))/1.0))-1)
print "estimUnion is "+str(estimUnion)

evalUnion=union.eval(primitives.Point(1.0,3.0,5.0))
print "evalUnion is "+str(evalUnion)
print "They should be equal"

print "expression is"+ union.toString()
print "\n"

intersection=primitives.Intersection(ellipsoid,frisbee)
estimIntersection=max(((1.0*x-0.0*(z-0.0))/1.0)*((1.0*x-0.0*(z-0.0))/1.0)+((0.0*(x-0.0)+1.0*(y-0.0))/1.0)*((0.0*(x-0.0)+1.0*(y-0.0))/1.0)+((0.0*x+1.0*(z-0.0))/1.0)*((0.0*x+1.0*(z-0.0))/1.0)-1,((1.0*x-0.0*(z-0.0))/1.0)*((1.0*x-0.0*(z-0.0))/1.0)+((0.0*(x-0.0)+1.0*(y-0.0))/1.0)*((0.0*(x-0.0)+1.0*(y-0.0))/1.0)+((0.0*x+1.0*(z-0.0))/1.0)*((0.0*x+1.0*(z-0.0))/1.0)-1)
print "estimIntersection is "+str(estimIntersection)

evalIntersection=intersection.eval(primitives.Point(1.0,3.0,5.0))
print "evalIntersection is "+str(evalIntersection)
print "They should be equal"

print "expression is "+ intersection.toString()
print "\n"

difference=primitives.Difference(ellipsoid,frisbee)
estimDifference=max(((1.0*x-0.0*(z-0.0))/1.0)*((1.0*x-0.0*(z-0.0))/1.0)+((0.0*(x-0.0)+1.0*(y-0.0))/1.0)*((0.0*(x-0.0)+1.0*(y-0.0))/1.0)+((0.0*x+1.0*(z-0.0))/1.0)*((0.0*x+1.0*(z-0.0))/1.0)-1,((1.0*x-0.0*(z-0.0))/1.0)*((1.0*x-0.0*(z-0.0))/1.0)+((0.0*(x-0.0)+1.0*(y-0.0))/1.0)*((0.0*(x-0.0)+1.0*(y-0.0))/1.0)+((0.0*x+1.0*(z-0.0))/1.0)*((0.0*x+1.0*(z-0.0))/1.0)-1)
print "estimDifference is "+str(estimDifference)

evalDifference=difference.eval(primitives.Point(1.0,3.0,5.0))
print "evalDifference is "+str(evalDifference)
print "They should be equal"

print "expression is "+ difference.toString()
print "\n"


acordion=accordion.accordionUniform(1.0,0.2,0.01, "ellipsoid",10,0.6,0.6,0.5)

evalAcordion=acordion.eval(primitives.Point(1.0,3.0,5.0))
estimAcordion=max(min(min(min(min(min(min(min(min(min(min(max(abs((0.0*x+1.0*(z-0.5)))-0.5,((1.0*x-0.0*(z-0.5))/0.2)*((1.0*x-0.0*(z-0.5))/0.2)+((0.0*(x-0.0)+1.0*(y-0.0))/0.2)*((0.0*(x-0.0)+1.0*(y-0.0))/0.2)-1),((1.0*x-0.0*(z-0.05))/0.6)*((1.0*x-0.0*(z-0.05))/0.6)+((0.0*(x-0.0)+1.0*(y-0.0))/0.6)*((0.0*(x-0.0)+1.0*(y-0.0))/0.6)+((0.0*x+1.0*(z-0.05))/0.075)*((0.0*x+1.0*(z-0.05))/0.075)-1),((1.0*x-0.0*(z-0.15))/0.6)*((1.0*x-0.0*(z-0.15))/0.6)+((0.0*(x-0.0)+1.0*(y-0.0))/0.6)*((0.0*(x-0.0)+1.0*(y-0.0))/0.6)+((0.0*x+1.0*(z-0.15))/0.075)*((0.0*x+1.0*(z-0.15))/0.075)-1),((1.0*x-0.0*(z-0.25))/0.6)*((1.0*x-0.0*(z-0.25))/0.6)+((0.0*(x-0.0)+1.0*(y-0.0))/0.6)*((0.0*(x-0.0)+1.0*(y-0.0))/0.6)+((0.0*x+1.0*(z-0.25))/0.075)*((0.0*x+1.0*(z-0.25))/0.075)-1),((1.0*x-0.0*(z-0.35))/0.6)*((1.0*x-0.0*(z-0.35))/0.6)+((0.0*(x-0.0)+1.0*(y-0.0))/0.6)*((0.0*(x-0.0)+1.0*(y-0.0))/0.6)+((0.0*x+1.0*(z-0.35))/0.075)*((0.0*x+1.0*(z-0.35))/0.075)-1),((1.0*x-0.0*(z-0.45))/0.6)*((1.0*x-0.0*(z-0.45))/0.6)+((0.0*(x-0.0)+1.0*(y-0.0))/0.6)*((0.0*(x-0.0)+1.0*(y-0.0))/0.6)+((0.0*x+1.0*(z-0.45))/0.075)*((0.0*x+1.0*(z-0.45))/0.075)-1),((1.0*x-0.0*(z-0.55))/0.6)*((1.0*x-0.0*(z-0.55))/0.6)+((0.0*(x-0.0)+1.0*(y-0.0))/0.6)*((0.0*(x-0.0)+1.0*(y-0.0))/0.6)+((0.0*x+1.0*(z-0.55))/0.075)*((0.0*x+1.0*(z-0.55))/0.075)-1),((1.0*x-0.0*(z-0.65))/0.6)*((1.0*x-0.0*(z-0.65))/0.6)+((0.0*(x-0.0)+1.0*(y-0.0))/0.6)*((0.0*(x-0.0)+1.0*(y-0.0))/0.6)+((0.0*x+1.0*(z-0.65))/0.075)*((0.0*x+1.0*(z-0.65))/0.075)-1),((1.0*x-0.0*(z-0.75))/0.6)*((1.0*x-0.0*(z-0.75))/0.6)+((0.0*(x-0.0)+1.0*(y-0.0))/0.6)*((0.0*(x-0.0)+1.0*(y-0.0))/0.6)+((0.0*x+1.0*(z-0.75))/0.075)*((0.0*x+1.0*(z-0.75))/0.075)-1),((1.0*x-0.0*(z-0.85))/0.6)*((1.0*x-0.0*(z-0.85))/0.6)+((0.0*(x-0.0)+1.0*(y-0.0))/0.6)*((0.0*(x-0.0)+1.0*(y-0.0))/0.6)+((0.0*x+1.0*(z-0.85))/0.075)*((0.0*x+1.0*(z-0.85))/0.075)-1),((1.0*x-0.0*(z-0.95))/0.6)*((1.0*x-0.0*(z-0.95))/0.6)+((0.0*(x-0.0)+1.0*(y-0.0))/0.6)*((0.0*(x-0.0)+1.0*(y-0.0))/0.6)+((0.0*x+1.0*(z-0.95))/0.075)*((0.0*x+1.0*(z-0.95))/0.075)-1),-min(min(min(min(min(min(min(min(min(min(max(abs((0.0*x+1.0*(z-0.5)))-0.49,((1.0*x-0.0*(z-0.5))/0.19)*((1.0*x-0.0*(z-0.5))/0.19)+((0.0*(x-0.0)+1.0*(y-0.0))/0.19)*((0.0*(x-0.0)+1.0*(y-0.0))/0.19)-1),((1.0*x-0.0*(z-0.05))/0.59)*((1.0*x-0.0*(z-0.05))/0.59)+((0.0*(x-0.0)+1.0*(y-0.0))/0.59)*((0.0*(x-0.0)+1.0*(y-0.0))/0.59)+((0.0*x+1.0*(z-0.05))/0.065)*((0.0*x+1.0*(z-0.05))/0.065)-1),((1.0*x-0.0*(z-0.15))/0.59)*((1.0*x-0.0*(z-0.15))/0.59)+((0.0*(x-0.0)+1.0*(y-0.0))/0.59)*((0.0*(x-0.0)+1.0*(y-0.0))/0.59)+((0.0*x+1.0*(z-0.15))/0.065)*((0.0*x+1.0*(z-0.15))/0.065)-1),((1.0*x-0.0*(z-0.25))/0.59)*((1.0*x-0.0*(z-0.25))/0.59)+((0.0*(x-0.0)+1.0*(y-0.0))/0.59)*((0.0*(x-0.0)+1.0*(y-0.0))/0.59)+((0.0*x+1.0*(z-0.25))/0.065)*((0.0*x+1.0*(z-0.25))/0.065)-1),((1.0*x-0.0*(z-0.35))/0.59)*((1.0*x-0.0*(z-0.35))/0.59)+((0.0*(x-0.0)+1.0*(y-0.0))/0.59)*((0.0*(x-0.0)+1.0*(y-0.0))/0.59)+((0.0*x+1.0*(z-0.35))/0.065)*((0.0*x+1.0*(z-0.35))/0.065)-1),((1.0*x-0.0*(z-0.45))/0.59)*((1.0*x-0.0*(z-0.45))/0.59)+((0.0*(x-0.0)+1.0*(y-0.0))/0.59)*((0.0*(x-0.0)+1.0*(y-0.0))/0.59)+((0.0*x+1.0*(z-0.45))/0.065)*((0.0*x+1.0*(z-0.45))/0.065)-1),((1.0*x-0.0*(z-0.55))/0.59)*((1.0*x-0.0*(z-0.55))/0.59)+((0.0*(x-0.0)+1.0*(y-0.0))/0.59)*((0.0*(x-0.0)+1.0*(y-0.0))/0.59)+((0.0*x+1.0*(z-0.55))/0.065)*((0.0*x+1.0*(z-0.55))/0.065)-1),((1.0*x-0.0*(z-0.65))/0.59)*((1.0*x-0.0*(z-0.65))/0.59)+((0.0*(x-0.0)+1.0*(y-0.0))/0.59)*((0.0*(x-0.0)+1.0*(y-0.0))/0.59)+((0.0*x+1.0*(z-0.65))/0.065)*((0.0*x+1.0*(z-0.65))/0.065)-1),((1.0*x-0.0*(z-0.75))/0.59)*((1.0*x-0.0*(z-0.75))/0.59)+((0.0*(x-0.0)+1.0*(y-0.0))/0.59)*((0.0*(x-0.0)+1.0*(y-0.0))/0.59)+((0.0*x+1.0*(z-0.75))/0.065)*((0.0*x+1.0*(z-0.75))/0.065)-1),((1.0*x-0.0*(z-0.85))/0.59)*((1.0*x-0.0*(z-0.85))/0.59)+((0.0*(x-0.0)+1.0*(y-0.0))/0.59)*((0.0*(x-0.0)+1.0*(y-0.0))/0.59)+((0.0*x+1.0*(z-0.85))/0.065)*((0.0*x+1.0*(z-0.85))/0.065)-1),((1.0*x-0.0*(z-0.95))/0.59)*((1.0*x-0.0*(z-0.95))/0.59)+((0.0*(x-0.0)+1.0*(y-0.0))/0.59)*((0.0*(x-0.0)+1.0*(y-0.0))/0.59)+((0.0*x+1.0*(z-0.95))/0.065)*((0.0*x+1.0*(z-0.95))/0.065)-1))

print "evalAcordion is " + str(evalAcordion)

print "estimAcordion is " + str(estimAcordion)

print "expression is \n"+ acordion.toString()
print "\n"
