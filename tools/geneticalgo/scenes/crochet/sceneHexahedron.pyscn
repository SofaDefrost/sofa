
import Sofa
import os

def createScene(rootNode):
                rootNode.createObject('RequiredPlugin', pluginName='SoftRobots')
                rootNode.createObject('VisualStyle', displayFlags='showVisualModels hideBehaviorModels showCollisionModels hideBoundingCollisionModels showForceFields showInteractionForceFields hideWireframe')
                rootNode.createObject('BackgroundSetting', color="1 1 1")
                rootNode.createObject('FreeMotionAnimationLoop')
                rootNode.createObject('GenericConstraintSolver', maxIterations='100', printLog='1', tolerance = '0.0000001')
                rootNode.findData('gravity').value='0 0 -9.810'
                rootNode.createObject('PythonScriptController', filename="controller.py", classname="controller")

                shape = rootNode.createChild("Shape")
                #shape.createObject("EulerImplicitSolver", name="cg_odesolver",  printLog="0", rayleighMass="0.1", rayleighStiffness="0.1")
                #shape.createObject("CGLinearSolver", template="GraphScattered", name="linear solver",  iterations="25",  tolerance="1e-09", threshold="1e-09")

                shape.createObject("CustomField", name="shape", function="shape.evalField")
                shape.createObject("CustomField", name="shapeinv",  function="shapeinv.evalField")

                #Mesh component
                #mesh=shape.createObject("MeshGenerationFromImplicitShape", meshingzone_center="0 0 1.0", meshingzone_radius="30", name="mesh", facet_size="0.3", cell_size="0.7", scalarfield="@shape", drawTetras="true")
                mesh=shape.createObject("SurfaceMeshGenerationFromScalarField", name="mesh", min = "-15 -15 -3", max = "15 15 20", step = "0.5", field="@shape", visuCavity="false")
                meshinv=shape.createObject("SurfaceMeshGenerationFromScalarField", name="Mesh", min = "-15 -15 -3", max = "15 15 20", step = "0.5", field="@shapeinv", visuCavity="false")
                #shape.createObject("PointCloudImplicitFieldVisualization", field="@shape", box="-10 -10 -2 10 10 20")

                if True:
                   #accordion"
                    accordion = rootNode.createChild('accordion')
                    accordion.createObject('EulerImplicit', name='odesolver', rayleighMass="0.1", rayleighStiffness="0.1")
                    accordion.createObject('ShewchukPCGLinearSolver', iterations='15', name='linearsolver', tolerance='1e-5', preconditioners='preconditioner', use_precond='true', update_step='1')
                    accordion.createObject('SparseGridRamification', name="tetras", n="10 10 35", vertices = "@../Shape/mesh.outputPoints", input_triangles = "@../Shape/mesh.outputTriangles")#, nbVirtualFinerLevels="3", finestConnectivity="0")   # 
                    accordion.createObject('MechanicalObject', name="dofs", scale="1", dy="2", position="@tetras.position", tags="NoPicking")
                    accordion.createObject('HexahedronFEMForceField', name="FEM", youngModulus="18000.0", poissonRatio="0.3", method="large", updateStiffnessMatrix="false", printLog="0")
                    #accordion.createObject('TetrahedronSetTopologyContainer', position='@../Shape/mesh.outputPoints', tetrahedra='@../Shape/mesh.outputTetras', name='container')
                    #accordion.createObject('TetrahedronSetTopologyModifier')
                    #accordion.createObject('TetrahedronSetTopologyAlgorithms', template='Vec3d')
                    #accordion.createObject('TetrahedronSetGeometryAlgorithms', template='Vec3d')

                    #accordion.createObject('MechanicalObject', name='tetras', src="@container", template='Vec3d', showIndices='false', showIndicesScale='4e-5', rx='0', dz='0')
                    accordion.createObject('UniformMass', totalmass='0.5')
                    #accordion.createObject('TetrahedronFEMForceField', template='Vec3d', name='FEM', method='large', poissonRatio='0.49',  youngModulus='18000')
                    accordion.createObject('BoxROI', name='boxROI', box='-10 -10 0  10 10 0.5', drawBoxes='true', position="@tetras.position", hexahedra="@tetras.hexahedra")
                    accordion.createObject('RestShapeSpringsForceField', points='@boxROI.indices', stiffness='1e12')
                    accordion.createObject('BoxROI', name='boxROI2', box='-10 -10 15  10 10 15.5', drawBoxes='true', position="@tetras.position", hexahedra="@tetras.hexahedra")
                    accordion.createObject('RestShapeSpringsForceField', points='@boxROI2.indices', stiffness='1000')

                    accordion.createObject('SparseLDLSolver', name='preconditioner')
                    accordion.createObject('LinearSolverConstraintCorrection', solverName='preconditioner')

#                    accordion/cavity
                    cavity = accordion.createChild('cavity')
                    #cavity.createObject('MeshSTLLoader', name='loader', filename='cylinder.stl')
                    #cavity.createObject('Mesh', src='@loader', name='topo')
                    #cavity.createObject('mesh', position='@../../Shape/mesh.outputPoints', triangles='@../../Shape/mesh.outputTriangles', name='topo0')
                    cavity.createObject('Mesh', position='@../../Shape/Mesh.outputPoints', triangles='@../../Shape/Mesh.outputTriangles', name='topo')

                    cavity.createObject('MechanicalObject', name='cavity')
                    cavity.createObject('SurfacePressureConstraint', name="pressure", triangles='@topo.triangles', value='300', valueType="volumeGrowth", flipNormal="true")
                    cavity.createObject('BarycentricMapping', name='mapping',  mapForces='false', mapMasses='false')
                   
                    if True:
        #                accordion/accordionVisu
                        accordionVisu = accordion.createChild('visu')
                        accordionVisu.createObject('QuadSetTopologyContainer', name='container')
                        accordionVisu.createObject('QuadSetTopologyModifier')
                        accordionVisu.createObject('QuadSetTopologyAlgorithms', template='Vec3d')
                        accordionVisu.createObject('QuadSetGeometryAlgorithms', template='Vec3d')
                        accordionVisu.createObject('Hexa2QuadTopologicalMapping', name='Mapping', input="@../tetras", output="@container")

                        accordionVisu.createObject('OglModel', template='ExtVec3f', color='0.3 0.2 0.2 1')
                        accordionVisu.createObject('IdentityMapping')

                return rootNode
