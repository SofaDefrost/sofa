
	function initGL(canvas) {
		var gl;
		try {
			gl = canvas.getContext("experimental-webgl");
			gl.viewportWidth = canvas.width;
			gl.viewportHeight = canvas.height;
		} catch(e) {
		}
		if (!gl) {
			alert("Could not initialise WebGL, sorry :-(");
		}
		return gl;
	}

	function getShader(gl, id) {
		var shaderScript = document.getElementById(id);
		if (!shaderScript) {
			return null;
		}

		var str = "";
		var k = shaderScript.firstChild;
		while (k) {
			if (k.nodeType == 3) {
				str += k.textContent;
			}
			k = k.nextSibling;
		}

		var shader;
		if (shaderScript.type == "x-shader/x-fragment") {
			shader = gl.createShader(gl.FRAGMENT_SHADER);
		} else if (shaderScript.type == "x-shader/x-vertex") {
			shader = gl.createShader(gl.VERTEX_SHADER);
		} else {
			return null;
		}

		gl.shaderSource(shader, str);
		gl.compileShader(shader);

		if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {
			alert(gl.getShaderInfoLog(shader));
			return null;
		}

		return shader;
	}


	function initShaders(gl, id) {
		var fragmentShader = getShader(gl, "shader-fs" + id);
		var vertexShader = getShader(gl, "shader-vs");
		var shaderProgram;
		shaderProgram = gl.createProgram();
		gl.attachShader(shaderProgram, vertexShader);
		gl.attachShader(shaderProgram, fragmentShader);
		gl.linkProgram(shaderProgram);

		if (!gl.getProgramParameter(shaderProgram, gl.LINK_STATUS)) {
			alert("Could not initialise shaders");
		}

		gl.useProgram(shaderProgram);
		return shaderProgram;
	}





	function initBuffers(gl)
	{
		var vertexPositionBuffer;
		vertexPositionBuffer = gl.createBuffer();
		gl.bindBuffer(gl.ARRAY_BUFFER, vertexPositionBuffer);
		var vertices = [
		1.0,  1.0,
		-1.0,  1.0,
		1.0, -1.0,
		-1.0, -1.0,
		];
		gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertices), gl.STATIC_DRAW);
		vertexPositionBuffer.itemSize = 2;
		vertexPositionBuffer.numItems = 4;
		return vertexPositionBuffer;
	}

	var timer = 0.0;
	var canvasList =[];
	function drawScene(gl, vertexPositionBuffer, shaderProgram)
	{
		timer += 0.01;
		gl.viewport(0, 0, gl.viewportWidth, gl.viewportHeight);
		gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);

		var position;
		var resolution;
		var time;

		position = gl.getAttribLocation(shaderProgram, "position");
		gl.enableVertexAttribArray(position);
		resolution = gl.getUniformLocation(shaderProgram, "resolution");
		time = gl.getUniformLocation(shaderProgram, "time");

		gl.bindBuffer(gl.ARRAY_BUFFER, vertexPositionBuffer);
		gl.vertexAttribPointer(position, vertexPositionBuffer.itemSize, gl.FLOAT, false, 0, 0);
		gl.uniform2f(resolution, gl.viewportWidth, gl.viewportHeight);
		gl.uniform1f(time, timer);

		gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);
	}

	function render()
	{
		for (var i=0; i < canvasList.length; i++)
		{
			console.log(canvasList[i].name)
			drawScene(canvasList[i].g, canvasList[i].vp, canvasList[i].sh);
		}	
		window.setTimeout(render, 1000 / 30);
	}

	function webGLStart(id)
	{
		var canvas = document.getElementsByTagName("canvas");
		for (var i=0; i < canvas.length; i++)
		{
			var gl = initGL(canvas[i]);
			var shaderProgram= initShaders(gl, canvas[i].getAttribute('id'))
			var vertexPositionBuffer= initBuffers(gl);
			gl.clearColor(0.0, 0.0, 0.0, 1.0);
			var aCanvas = {name: canvas[i].getAttribute('id'), g:gl, sh: shaderProgram, vp: vertexPositionBuffer};
			canvasList.push(aCanvas);
		}
                render();
	}
