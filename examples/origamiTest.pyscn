import Sofa
import math
import os
from compiler.ast import flatten
path = os.path.dirname(os.path.abspath(__file__))+'/mesh/'

# Units: mm, kg, s.     Pressure in kPa = k (kg/(m.s^2)) = k (g/(mm.s^2) =  kg/(mm.s^2)

def createScene(rootNode):
    
                rootNode.createObject('RequiredPlugin', pluginName='SoftRobots')
                rootNode.createObject('RequiredPlugin', pluginName='SofaPython')
                rootNode.createObject('RequiredPlugin', pluginName='ModelOrderReduction')
                rootNode.findData('dt').value=0.001
                rootNode.findData('gravity').value='-981.0 0 0 ';
                #rootNode.findData('gravity').value='0 0 0';
                rootNode.createObject('VisualStyle', displayFlags='showVisualModels showBehaviorModels hideCollisionModels hideBoundingCollisionModels showForceFields showInteractionForceFields hideWireframe')


                nx = 2
                ny = 2
                ks = 1.0e6
                kd = 500
                vertexPosition = []
                for j in range(2*ny+1):
                    for i in range(2*nx+1):
                        #bottom
                        if j % 2 == 0:
                            vertexPosition.append(i)
                            vertexPosition.append(j)
                            vertexPosition.append(0)
                        elif (j-1) % 4 == 0:
                            if (i % 2) != 0:
                                vertexPosition.append(i)
                                vertexPosition.append(j)
                                vertexPosition.append(0)
                        else:
                            if (i % 2) == 0:
                                vertexPosition.append(i)
                                vertexPosition.append(j)
                                vertexPosition.append(0)
                                
                print  vertexPosition     
                
                foldSpring=[]
                for j in range(ny):
                    for i in range(nx):
                        if (j % 2) == 0:
                            bottomLeft = j/2*(6*nx+3)+2*i
                            bottomMiddle = bottomLeft + 1
                            bottomRight = bottomLeft + 2
                            center = j/2*(6*nx+3)+2*nx+1+i
                            topLeft = bottomLeft + 2*nx+1 + nx
                            topMiddle = topLeft + 1
                            topRight = topLeft + 2
                            
                            middleLeftTop = j/2*(6*nx+3)+5*nx+2+i
                            middleRightTop = middleLeftTop + 1
                            centerRight = center + 1
                            
                            lengthdiagonal = math.sqrt(2)
                            lengthstraight = 1
                            lengthDoublestraight = 2
                            if i==0:
                                foldSpring.append([bottomLeft,topLeft,-1,center,0, ks,kd, lengthDoublestraight])
                            if j==0:
                                foldSpring.append([bottomLeft,bottomMiddle,center,-1,0, ks,kd, lengthstraight])
                                foldSpring.append([bottomMiddle,bottomRight,center,-1,0, ks,kd, lengthstraight])
                            if i<nx-1:
                                foldSpring.append([bottomRight,topRight,center,centerRight,-1, ks,kd,lengthDoublestraight]) 
                            else:
                                foldSpring.append([bottomRight,topRight,center,-1,0, ks,kd,lengthDoublestraight]) 
                            if j<ny-1:    
                                foldSpring.append([topLeft,topMiddle,middleLeftTop,center,-1, ks,kd,lengthstraight])
                                foldSpring.append([topMiddle,topRight,middleRightTop,center,-1, ks,kd,lengthstraight])
                            else:
                                foldSpring.append([topLeft,topMiddle,-1,center,0, ks,kd,lengthstraight])
                                foldSpring.append([topMiddle,topRight,-1,center,0, ks,kd,lengthstraight])
                            # bars in the middle
                            foldSpring.append([bottomLeft,center,topLeft,bottomMiddle,1, ks,kd, lengthdiagonal])
                            foldSpring.append([bottomMiddle,center,bottomLeft,bottomRight,-1, ks,kd,lengthstraight])
                            foldSpring.append([bottomRight,center,bottomMiddle,topRight,1, ks,kd,lengthdiagonal])
                            foldSpring.append([center,topLeft,bottomLeft,topMiddle,1, ks,kd,lengthdiagonal])
                            foldSpring.append([center,topMiddle,topLeft,topRight,-1, ks,kd,lengthstraight])
                            foldSpring.append([center,topRight,topMiddle,bottomRight,1, ks,kd,lengthdiagonal])
                        else:
                            bottomLeft = (j-1)/2*(6*nx+3)+ 2*i + 2*nx+1 + nx
                            middleLeft = (j-1)/2*(6*nx+3) + 5*nx+2 + i
                            topLeft = bottomLeft + 3*nx + 2
                            bottomMiddle = bottomLeft + 1
                            topMiddle = topLeft + 1
                            bottomRight = bottomLeft + 2
                            middleRight = middleLeft + 1
                            topRight = topLeft + 2
                            
                            bottomMiddleRight = bottomRight + 1
                            topMiddleRight = topRight + 1
                            centerTop = (j-1)/2*(6*nx+3) + 5*nx+2 + 3*nx+2 + i

                            # bars in the middle
                            foldSpring.append([bottomMiddle,middleLeft,bottomLeft,topMiddle,1, ks,kd, lengthdiagonal])
                            foldSpring.append([bottomMiddle,middleRight,topMiddle,bottomRight,1, ks,kd,lengthdiagonal])
                            foldSpring.append([middleLeft,topMiddle,topLeft,bottomMiddle,1, ks,kd,lengthdiagonal])
                            foldSpring.append([middleRight,topMiddle,bottomMiddle,topRight,1, ks,kd,lengthdiagonal])
                            foldSpring.append([bottomMiddle,topMiddle,middleLeft,middleRight,-1, ks,kd,lengthDoublestraight])

                            if i==0:
                                foldSpring.append([bottomLeft,middleLeft,-1,bottomMiddle,0, ks,kd,lengthstraight])
                                foldSpring.append([middleLeft,topLeft,-1,topMiddle,0, ks,kd,lengthstraight])
                                
                            if i<nx-1:
                                foldSpring.append([bottomRight,middleRight,bottomMiddle,bottomMiddleRight,-1, ks,kd,lengthstraight])
                                foldSpring.append([middleRight,topRight,topMiddle,topMiddleRight,-1, ks,kd,lengthstraight])
                            else:
                                foldSpring.append([bottomRight,middleRight,bottomMiddle,-1,0, ks,kd,lengthstraight])
                                foldSpring.append([middleRight,topRight,topMiddle,-1,0, ks,kd,lengthstraight])
                            if j<ny-1:
                                foldSpring.append([topLeft,topMiddle,centerTop,middleLeft,-1, ks,kd,lengthstraight])
                                foldSpring.append([topMiddle,topRight,centerTop,middleRight,-1, ks,kd,lengthstraight])
                            else:
                                foldSpring.append([topLeft,topMiddle,-1,middleLeft,0, ks,kd,lengthstraight])
                                foldSpring.append([topMiddle,topRight,-1,middleRight,0, ks,kd,lengthstraight])
                                

                
                        
                print   foldSpring     
                foldSpring = flatten(foldSpring)
                print   foldSpring
                model = rootNode.createChild('model')
                model.createObject('EulerImplicitSolver',rayleighStiffness=0.1, rayleighMass=0.1)
                model.createObject('CGLinearSolver',iterations='2500', tolerance=1.0e-7, threshold=1.0e-7, warmStart=True)
                #model.createObject('TriangleSetTopologyContainer', name='topo', position=[0,0,0, 1,0,0, 2,0,0, 3,0,0, 4,0,0,    1,1,0, 3,1,0,    0,2,0, 1,2,0, 2,2,0, 3,2,0, 4,2,0])#, edges=[0,1, 1,2, 2,3, 3,4, 0,5, 0,7, 1,5, 2,5, 2,6, 2,9, 3,6, 4,11, 4,6, 5,7, 5,8, 5,9, 6, 9, 6,10, 6,11, 7,8, 8,9, 9,10, 10,11 ], triangles=[0,1,5,  1,2,5, 2,3,6, 3,4,6, 0,5,7,  2,5,9, 2,6,9, 4,6,11, 5,7,8, 5,8,9, 6,9,10, 6,10,11])  
                model.createObject('TriangleSetTopologyContainer', name='topo', position=vertexPosition)
                model.createObject('MechanicalObject', src='@topo')
                springOut=[0,1,5,-1,0,500,5,1,                                                                                            
                        1,2,5,-1,0,500,5,1, 
                        2,3,6,-1,0,500,5,1, 
                        3,4,6,-1,0,500,5,1, 
                        0,5,7,1,1,500,5,1.4142135623731, 
                        0,7,-1,5,0,500,5,2, 
                        1,5,0,2,-1,500,5,1, 
                        2,5,1,9,1,500,5,1.4142135623731, 
                        2,6,9,3,1,500,5,1.4142135623731, 
                        2,9,5,6,-1,500,5,2, 
                        3,6,2,4,-1,500,5,1, 
                        4,11,6,-1,0,500,5,2, 
                        4,6,3,11,1,500,5,1.4142135623731, 
                        5,7,0,8,1,500,5,1.4142135623731, 
                        5,8,7,9,-1,500,5,1, 
                        5,9,8,2,1,500,5,1.4142135623731, 
                        6,9,2,10,1,500,5,1.4142135623731, 
                        6,10,9,11,-1,500,5,1, 
                        6,11,10,4,1,500,5,1.4142135623731, 
                        7,8,-1,5,0,500,5,1,
                        8,9,-1,5,0,500,5,1, 
                        9,10,-1,6,0,500,5,1, 
                        10,11,-1,6,0, 500,5,1 ]
                model.createObject('OrigamiSpringForceField', template="Vec3d", origamiSpring=foldSpring, angleTarget=math.pi, drawMode=1)
                #model.createObject('TriangleFEMForceField', template='Vec3d', name='FEM', method='large', poissonRatio='0.49',  youngModulus='5000')
                model.createObject('UniformMass', totalMass=0.3)
                #model.createObject('FixedConstraint', indices=[0,2])
                model.createObject('RestShapeSpringsForceField', stiffness=100000, points=[0])

                return rootNode
